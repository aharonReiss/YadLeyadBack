// <auto-generated />
using System;
using Infrastructure.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace YadLeyadBack.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250329221902_AddNewTables")]
    partial class AddNewTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityID"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Domain.Entities.FieldType", b =>
                {
                    b.Property<int>("FieldTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FieldTypeId"));

                    b.Property<string>("FieldTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FieldTypeId");

                    b.ToTable("FieldTypes");
                });

            modelBuilder.Entity("Domain.Entities.Fields", b =>
                {
                    b.Property<int>("FieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FieldId"));

                    b.Property<int>("FieldType")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceHolder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Reqired")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FieldId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("Domain.Entities.Furniture", b =>
                {
                    b.Property<int>("FurnitureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FurnitureId"));

                    b.Property<string>("FurnitureDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FurnitureId");

                    b.ToTable("Furniture");
                });

            modelBuilder.Entity("Domain.Entities.LevelsForCategory", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LevelId"));

                    b.Property<int>("CtegoryNumber")
                        .HasColumnType("int");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LevelTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LevelId");

                    b.ToTable("LevelsForCategories");
                });

            modelBuilder.Entity("Domain.Entities.Neighborhood", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("NeighborhoodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CityId");

                    b.ToTable("Neighborhoods");
                });

            modelBuilder.Entity("Domain.Entities.NumberOfRooms", b =>
                {
                    b.Property<int>("NumberOfRoomsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NumberOfRoomsId"));

                    b.Property<string>("NumberOfRoomsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NumberOfRoomsId");

                    b.ToTable("NumberOfRooms");
                });

            modelBuilder.Entity("Domain.Entities.Parasha", b =>
                {
                    b.Property<int>("ParashaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParashaId"));

                    b.Property<string>("ParashaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParashaId");

                    b.ToTable("Parashot");
                });

            modelBuilder.Entity("Domain.Entities.PhoneNumber", b =>
                {
                    b.Property<int>("PhoneNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhoneNumberId"));

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PropertyDetailId")
                        .HasColumnType("bigint");

                    b.HasKey("PhoneNumberId");

                    b.HasIndex("PropertyDetailId");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("Domain.Entities.Property", b =>
                {
                    b.Property<long>("ProprtyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProprtyId"));

                    b.Property<int?>("AdressNumber")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("HouseNumber")
                        .HasColumnType("int");

                    b.Property<int>("StreeId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("ProprtyId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Domain.Entities.PropertyCondition", b =>
                {
                    b.Property<int>("PropertyConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyConditionId"));

                    b.Property<string>("PropertyConditionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PropertyConditionId");

                    b.ToTable("PropertyConditions");
                });

            modelBuilder.Entity("Domain.Entities.PropertyDetail", b =>
                {
                    b.Property<long>("PropertyDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PropertyDetailId"));

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HouseCommittee")
                        .HasColumnType("int");

                    b.Property<bool>("IsFurnished")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMediation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivateHouse")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTherElevator")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsThereAirCondition")
                        .HasColumnType("bit");

                    b.Property<bool>("IsThereLandscape")
                        .HasColumnType("bit");

                    b.Property<bool>("IsThereOptions")
                        .HasColumnType("bit");

                    b.Property<bool>("IsThereParcking")
                        .HasColumnType("bit");

                    b.Property<bool>("IsThereSafeRoom")
                        .HasColumnType("bit");

                    b.Property<bool>("IsThereSukaPorch")
                        .HasColumnType("bit");

                    b.Property<bool>("IsThereWarehouse")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfRoomsId")
                        .HasColumnType("int");

                    b.Property<int>("PorchCount")
                        .HasColumnType("int");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("PropertyConditionId")
                        .HasColumnType("int");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint");

                    b.Property<int>("PropertySizeInMeters")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyTax")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyTypeId")
                        .HasColumnType("int");

                    b.HasKey("PropertyDetailId");

                    b.ToTable("PropertyDetails");
                });

            modelBuilder.Entity("Domain.Entities.PropertyForShabatDetail", b =>
                {
                    b.Property<long>("PropertyForShabatDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PropertyForShabatDetailId"));

                    b.Property<int>("CountBeds")
                        .HasColumnType("int");

                    b.Property<int>("ParashaId")
                        .HasColumnType("int");

                    b.Property<long>("PropertyDetailId")
                        .HasColumnType("bigint");

                    b.HasKey("PropertyForShabatDetailId");

                    b.HasIndex("PropertyDetailId");

                    b.ToTable("PropertyForShabatDetails");
                });

            modelBuilder.Entity("Domain.Entities.PropertyType", b =>
                {
                    b.Property<int>("PropertyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyTypeId"));

                    b.Property<string>("PropertyTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PropertyTypeId");

                    b.ToTable("PropertyTypes");
                });

            modelBuilder.Entity("Domain.Entities.Street", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("StreetID")
                        .HasColumnType("int");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CityId");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("Domain.Entities.StreetToNeighborhood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("NeighborhoodId")
                        .HasColumnType("int");

                    b.Property<int>("StreetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StreetToNeighborhood");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("EmailAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmailAdress")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.Neighborhood", b =>
                {
                    b.HasOne("Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Domain.Entities.PhoneNumber", b =>
                {
                    b.HasOne("Domain.Entities.PropertyDetail", "PropertyDetail")
                        .WithMany()
                        .HasForeignKey("PropertyDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropertyDetail");
                });

            modelBuilder.Entity("Domain.Entities.PropertyForShabatDetail", b =>
                {
                    b.HasOne("Domain.Entities.PropertyDetail", "PropertyDetail")
                        .WithMany()
                        .HasForeignKey("PropertyDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropertyDetail");
                });

            modelBuilder.Entity("Domain.Entities.Street", b =>
                {
                    b.HasOne("Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });
#pragma warning restore 612, 618
        }
    }
}
